// ../../../internal/vite-config/src/config/application.ts
import dayjs from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+dayjs@1.11.9/node_modules/dayjs/dayjs.min.js";
import { readPackageJSON } from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+pkg-types@1.0.2/node_modules/pkg-types/dist/index.mjs";
import { defineConfig, loadEnv, mergeConfig } from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+vite@4.4.9_@types+node@12.7.5/node_modules/vite/dist/node/index.js";

// ../../../internal/vite-config/src/plugins/index.ts
import react from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+@vitejs+plugin-react@4.2.0_vite@4.4.9/node_modules/@vitejs/plugin-react/dist/index.mjs";

// ../../../internal/vite-config/src/plugins/visualizer.ts
import { visualizer } from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+rollup-plugin-visualizer@5.9.2_rollup@2.79.1/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";

// ../../../internal/vite-config/src/config/package.ts
import { readPackageJSON as readPackageJSON2 } from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+pkg-types@1.0.2/node_modules/pkg-types/dist/index.mjs";
import { defineConfig as defineConfig2, mergeConfig as mergeConfig2 } from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+vite@4.4.9_@types+node@12.7.5/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+vite-plugin-dts@2.2.0_@types+node@12.7.5_rollup@2.79.1_vite@4.4.9/node_modules/vite-plugin-dts/dist/index.mjs";
import react2 from "file:///Users/glennxu/Desktop/workspace/entropy-cloud/nop-chaos-self/node_modules/.pnpm/registry.npmmirror.com+@vitejs+plugin-react@4.2.0_vite@4.4.9/node_modules/@vitejs/plugin-react/dist/index.mjs";
function definePackageConfig(defineOptions = {}) {
  const { overrides = {
    // plugins: [ react() ],
    // test: {
    //   globals: true,
    //   environment: 'jsdom',
    //   coverage: {
    //     reporter: [ 'text', 'json', 'html' ]
    //   }
    // }
  } } = defineOptions;
  const root = process.cwd();
  return defineConfig2(async () => {
    const { dependencies = {}, peerDependencies = {} } = await readPackageJSON2(
      root
    );
    const packageConfig = {
      define: {
        "process.env": {}
      },
      build: {
        sourcemap: true,
        minify: false,
        lib: {
          entry: "src/index.ts",
          formats: ["es"],
          fileName: () => "index.mjs"
        },
        rollupOptions: {
          external: [
            ...Object.keys(dependencies),
            ...Object.keys(peerDependencies)
          ]
        }
      },
      plugins: [
        react2(),
        dts({
          entryRoot: "src",
          logLevel: "error"
        })
        // configVisualizerConfig(),
      ]
    };
    return mergeConfig2(packageConfig, {
      ...overrides
    });
  });
}

// vite.config.ts
var vite_config_default = definePackageConfig();
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
